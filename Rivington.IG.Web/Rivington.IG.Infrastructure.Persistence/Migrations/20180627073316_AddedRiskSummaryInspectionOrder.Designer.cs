// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Rivington.IG.Infrastructure.Persistence;
using System;

namespace Rivington.IG.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RivingtonContext))]
    [Migration("20180627073316_AddedRiskSummaryInspectionOrder")]
    partial class AddedRiskSummaryInspectionOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Rivington.IG.Domain.Models.ApplianceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ApplianceType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.BurglarAlarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BurglarAlarm");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.BurglarAlarmType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BurglarAlarmType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("County");

                    b.Property<string>("Name");

                    b.Property<string>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.DomesticHelpType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("DomesticHelpType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.FireAlarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FireAlarm");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.FireAlarmType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FireAlarmType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.ForgotPassword", b =>
                {
                    b.Property<Guid>("ForgotID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("EmailAddress");

                    b.HasKey("ForgotID");

                    b.ToTable("ForgotPassword");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ApplianceBrand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ApplianceBrand");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ArchitecturalStyle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ArchitecturalStyle");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.BathroomCounter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BathroomCounter");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.BathroomFixture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BathroomFixture");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.BathroomFloor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BathroomFloor");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.BathroomVanity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BathroomVanity");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.BearInvasionConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BearInvasionConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Ceiling", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Ceiling");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ChimneyType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ChimneyType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ConstructionQuality", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ConstructionQuality");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.CustomerOnSite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("CustomerOnSite");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.DeckConditionConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("DeckConditionConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.DogTemperament", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("DogTemperament");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.DoorHardware", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("DoorHardware");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.EavesType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("EavesType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ElectricalConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ElectricalConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Employee10HoursPerWeek", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Employee10HoursPerWeek");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ExteriorBuildingConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ExteriorBuildingConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ExteriorWindowCoveringType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ExteriorWindowCoveringType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.ExternalFuelSourceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ExternalFuelSourceType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FenceConditionConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FenceConditionConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FencingType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FencingType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FireDepartmentStaffing", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FireDepartmentStaffing");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FireplaceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FireplaceType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FloorCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FloorCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FlooringType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FlooringType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FoundationType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FoundationType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.FramingType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("FramingType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.GutterType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("GutterType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.HomeShape", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("HomeShape");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<byte[]>("Thumbnail");

                    b.Property<string>("ThumbnailPath");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique()
                        .HasName("IX_Image_FilePath")
                        .HasFilter("[FilePath] IS NOT NULL");

                    b.HasIndex("ThumbnailPath")
                        .IsUnique()
                        .HasName("IX_Image_ThumbnailPath")
                        .HasFilter("[ThumbnailPath] IS NOT NULL");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AssignedById");

                    b.Property<DateTime?>("AssignedDate");

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("InspectionDate");

                    b.Property<Guid?>("InspectorId");

                    b.Property<string>("RiskSummary");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InspectorId");

                    b.ToTable("InspectionOrder");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Datemodified");

                    b.Property<Guid>("InspectionOrderId");

                    b.Property<Guid>("ModifiedById");

                    b.Property<string>("Notes");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("InspectionOrderId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InspectionOrderNotes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderProperty");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposure", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("AdditionalComment");

                    b.Property<bool>("AdditionalConcern");

                    b.Property<bool>("AdjacentExposure");

                    b.Property<string>("AdjacentExposureComment");

                    b.Property<bool>("BearInvasionConcern");

                    b.Property<bool>("BiteHistory");

                    b.Property<bool>("BracingBolting");

                    b.Property<string>("BusinessAgricultureType");

                    b.Property<bool>("BusinessAgricultureonPremises");

                    b.Property<string>("CustomerOnSiteId");

                    b.Property<bool>("DaycareonSite");

                    b.Property<bool>("Dog");

                    b.Property<string>("DogBreed");

                    b.Property<string>("DogTemperamentId");

                    b.Property<string>("Employee10HoursPerWeekId");

                    b.Property<int?>("HorsesFarmAnimalCount");

                    b.Property<string>("HorsesFarmAnimalType");

                    b.Property<bool>("HorsesFarmAnimalsonPremise");

                    b.Property<int?>("NumberofDog");

                    b.Property<bool>("OtherAttractiveNuisance");

                    b.Property<string>("OtherAttractiveNuisanceComment");

                    b.Property<bool>("SafetyNetting");

                    b.Property<bool>("SkateboardRamp");

                    b.Property<bool>("Trampoline");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOnSiteId");

                    b.HasIndex("DogTemperamentId");

                    b.HasIndex("Employee10HoursPerWeekId");

                    b.ToTable("InspectionOrderPropertyAdditionalExposure");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyAdditionalExposureId");

                    b.Property<string>("BearInvasionConcernDetailId");

                    b.HasKey("InspectionOrderPropertyAdditionalExposureId", "BearInvasionConcernDetailId");

                    b.HasIndex("BearInvasionConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails_BearInvasionConcernDetailId");

                    b.ToTable("InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyBuildingConcern");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernElectricalConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("ElectricalConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "ElectricalConcernDetailId");

                    b.HasIndex("ElectricalConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernElectricalConcernDetails_ElectricalConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernElectricalConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("ExteriorBuildingConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "ExteriorBuildingConcernDetailId");

                    b.HasIndex("ExteriorBuildingConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails_ExteriorBuildingConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("OtherStructureConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "OtherStructureConcernDetailId");

                    b.HasIndex("OtherStructureConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails_OtherStructureConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernPlumbingConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("PlumbingConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "PlumbingConcernDetailId");

                    b.HasIndex("PlumbingConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernPlumbingConcernDetails_PlumbingConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernPlumbingConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernRoofConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("RoofConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "RoofConcernDetailId");

                    b.HasIndex("RoofConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernRoofConcernDetails_RoofConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernRoofConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyBuildingConcernId");

                    b.Property<string>("SurroundingAreaConcernDetailId");

                    b.HasKey("InspectionOrderPropertyBuildingConcernId", "SurroundingAreaConcernDetailId");

                    b.HasIndex("SurroundingAreaConcernDetailId")
                        .HasName("IX_InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails_SurroundingAreaConcernDetailId");

                    b.ToTable("InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructure", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("OtherDetachedStructure");

                    b.Property<bool>("Outbuilding");

                    b.Property<string>("OutbuildingConcernOrComment");

                    b.Property<string>("OutbuildingTypeOrConstruction");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyDetachedStructure");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyDetachedStructureId");

                    b.Property<string>("OtherDetachedStructuresDetailId");

                    b.HasKey("InspectionOrderPropertyDetachedStructureId", "OtherDetachedStructuresDetailId");

                    b.HasIndex("OtherDetachedStructuresDetailId")
                        .HasName("IX_InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails_OtherDetachedStructuresDetailId");

                    b.ToTable("InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOutbuildingDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyDetachedStructureId");

                    b.Property<string>("OutbuildingDetailId");

                    b.HasKey("InspectionOrderPropertyDetachedStructureId", "OutbuildingDetailId");

                    b.HasIndex("OutbuildingDetailId")
                        .HasName("IX_InspectionOrderPropertyDetachedStructureOutbuildingDetails_OutbuildingDetailId");

                    b.ToTable("InspectionOrderPropertyDetachedStructureOutbuildingDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("BurglarAlarmId");

                    b.Property<string>("BurglarAlarmTypeId");

                    b.Property<int?>("CityId");

                    b.Property<string>("ContractorName");

                    b.Property<string>("ContractorPhone");

                    b.Property<bool>("DomesticHelp");

                    b.Property<int?>("EstimatedSquareFootage");

                    b.Property<string>("FireAlarmId");

                    b.Property<string>("FireAlarmTypeId");

                    b.Property<string>("LastServiceDate");

                    b.Property<int?>("MajorSystemAge");

                    b.Property<string>("MajorSystemDescription");

                    b.Property<string>("OccupancyTypeId");

                    b.Property<bool>("Pre1970Updates");

                    b.Property<string>("Pre1970UpdatesDescription");

                    b.Property<bool>("PriorLoss");

                    b.Property<string>("PriorLossDescription");

                    b.Property<bool>("ProblemResolved");

                    b.Property<bool>("RecentlyRenovated");

                    b.Property<int?>("RoofAge");

                    b.Property<bool>("SepticTank");

                    b.Property<string>("SmokeOnlyAlarmId");

                    b.Property<string>("SmokeOnlyAlarmTypeId");

                    b.Property<string>("StateId");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<int?>("WaterHeaterAge");

                    b.Property<string>("WoodStoveLocation");

                    b.Property<bool>("WoodStoveOrWoodBurningFirePlace");

                    b.Property<string>("WoodStoveUsage");

                    b.Property<int?>("YearBuilt");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("BurglarAlarmId");

                    b.HasIndex("BurglarAlarmTypeId");

                    b.HasIndex("CityId")
                        .HasName("IX_InspectionOrderPropertyGeneral_CityId");

                    b.HasIndex("FireAlarmId");

                    b.HasIndex("FireAlarmTypeId");

                    b.HasIndex("OccupancyTypeId");

                    b.HasIndex("SmokeOnlyAlarmId");

                    b.HasIndex("SmokeOnlyAlarmTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("InspectionOrderPropertyGeneral");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralDomesticHelpTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyGeneralId");

                    b.Property<string>("DomesticHelpTypeId");

                    b.HasKey("InspectionOrderPropertyGeneralId", "DomesticHelpTypeId");

                    b.HasIndex("DomesticHelpTypeId")
                        .HasName("IX_InspectionOrderPropertyGeneralDomesticHelpTypes_DomesticHelpTypeId");

                    b.ToTable("InspectionOrderPropertyGeneralDomesticHelpTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralPolicyPremiumCredits", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyGeneralId");

                    b.Property<string>("PolicyPremiumCreditId");

                    b.HasKey("InspectionOrderPropertyGeneralId", "PolicyPremiumCreditId");

                    b.HasIndex("PolicyPremiumCreditId")
                        .HasName("IX_InspectionOrderPropertyGeneralPolicyPremiumCredits_PolicyPremiumCreditId");

                    b.ToTable("InspectionOrderPropertyGeneralPolicyPremiumCredits");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralWildfireCredits", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyGeneralId");

                    b.Property<string>("WildfireCreditId");

                    b.HasKey("InspectionOrderPropertyGeneralId", "WildfireCreditId");

                    b.HasIndex("WildfireCreditId")
                        .HasName("IX_InspectionOrderPropertyGeneralWildfireCredits_WildfireCreditId");

                    b.ToTable("InspectionOrderPropertyGeneralWildfireCredits");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int?>("NumberofFullBath");

                    b.Property<int?>("NumberofHalfBath");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyHighValueBath");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomCounters", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueBathId");

                    b.Property<string>("BathroomCounterId");

                    b.HasKey("InspectionOrderPropertyHighValueBathId", "BathroomCounterId");

                    b.HasIndex("BathroomCounterId")
                        .HasName("IX_InspectionOrderPropertyHighValueBathBathroomCounters_BathroomCounterId");

                    b.ToTable("InspectionOrderPropertyHighValueBathBathroomCounters");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFixtures", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueBathId");

                    b.Property<string>("BathroomFixtureId");

                    b.HasKey("InspectionOrderPropertyHighValueBathId", "BathroomFixtureId");

                    b.HasIndex("BathroomFixtureId")
                        .HasName("IX_InspectionOrderPropertyHighValueBathBathroomFixtures_BathroomFixtureId");

                    b.ToTable("InspectionOrderPropertyHighValueBathBathroomFixtures");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFloors", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueBathId");

                    b.Property<string>("BathroomFloorId");

                    b.HasKey("InspectionOrderPropertyHighValueBathId", "BathroomFloorId");

                    b.HasIndex("BathroomFloorId")
                        .HasName("IX_InspectionOrderPropertyHighValueBathBathroomFloors_BathroomFloorId");

                    b.ToTable("InspectionOrderPropertyHighValueBathBathroomFloors");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomVanities", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueBathId");

                    b.Property<string>("BathroomVanityId");

                    b.HasKey("InspectionOrderPropertyHighValueBathId", "BathroomVanityId");

                    b.HasIndex("BathroomVanityId")
                        .HasName("IX_InspectionOrderPropertyHighValueBathBathroomVanities_BathroomVanityId");

                    b.ToTable("InspectionOrderPropertyHighValueBathBathroomVanities");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathTubsAndShowers", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueBathId");

                    b.Property<string>("TubAndShowerId");

                    b.HasKey("InspectionOrderPropertyHighValueBathId", "TubAndShowerId");

                    b.HasIndex("TubAndShowerId")
                        .HasName("IX_InspectionOrderPropertyHighValueBathTubsAndShowers_TubAndShowerId");

                    b.ToTable("InspectionOrderPropertyHighValueBathTubsAndShowers");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("AverageWallHeight");

                    b.Property<string>("ChimneyTypeId");

                    b.Property<int?>("NumberofChimney");

                    b.HasKey("Id");

                    b.HasIndex("ChimneyTypeId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeiling");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingCeilings", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("CeilingId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "CeilingId");

                    b.HasIndex("CeilingId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingCeilings_CeilingId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingCeilings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("FloorCoveringId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "FloorCoveringId");

                    b.HasIndex("FloorCoveringId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings_FloorCoveringId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("InteriorWallCoveringId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "InteriorWallCoveringId");

                    b.HasIndex("InteriorWallCoveringId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings_InteriorWallCoveringId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWallTrims", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("WallTrimId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "WallTrimId");

                    b.HasIndex("WallTrimId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingWallTrims_WallTrimId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingWallTrims");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowBrands", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("WindowBrandId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "WindowBrandId");

                    b.HasIndex("WindowBrandId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingWindowBrands_WindowBrandId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingWindowBrands");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowStyles", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueFloorToCeilingId");

                    b.Property<string>("WindowStyleId");

                    b.HasKey("InspectionOrderPropertyHighValueFloorToCeilingId", "WindowStyleId");

                    b.HasIndex("WindowStyleId")
                        .HasName("IX_InspectionOrderPropertyHighValueFloorToCeilingWindowStyles_WindowStyleId");

                    b.ToTable("InspectionOrderPropertyHighValueFloorToCeilingWindowStyles");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int?>("NumberofFireplace");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeature");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("DoorHardwareId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "DoorHardwareId");

                    b.HasIndex("DoorHardwareId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares_DoorHardwareId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("FireplaceTypeId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "FireplaceTypeId");

                    b.HasIndex("FireplaceTypeId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes_FireplaceTypeId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("InteriorDoorTypeId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "InteriorDoorTypeId");

                    b.HasIndex("InteriorDoorTypeId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes_InteriorDoorTypeId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureLightingTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("LightingTypeId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "LightingTypeId");

                    b.HasIndex("LightingTypeId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureLightingTypes_LightingTypeId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureLightingTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("MiscellaneousExtraFeatureId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "MiscellaneousExtraFeatureId");

                    b.HasIndex("MiscellaneousExtraFeatureId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures_MiscellaneousExtraFeatureId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("RoomWithCabinetryId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "RoomWithCabinetryId");

                    b.HasIndex("RoomWithCabinetryId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry_RoomWithCabinetryId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureStaircases", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueInteriorFeatureId");

                    b.Property<string>("StaircaseId");

                    b.HasKey("InspectionOrderPropertyHighValueInteriorFeatureId", "StaircaseId");

                    b.HasIndex("StaircaseId")
                        .HasName("IX_InspectionOrderPropertyHighValueInteriorFeatureStaircases_StaircaseId");

                    b.ToTable("InspectionOrderPropertyHighValueInteriorFeatureStaircases");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchen", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("IslandCabinetMaterial");

                    b.Property<string>("IslandCountertopMaterial");

                    b.Property<string>("KitchenBacksplashMaterial");

                    b.Property<string>("KitchenCabinetId");

                    b.Property<string>("KitchenCountertopId");

                    b.Property<bool>("KitchenIsland");

                    b.HasKey("Id");

                    b.HasIndex("KitchenCabinetId");

                    b.HasIndex("KitchenCountertopId");

                    b.ToTable("InspectionOrderPropertyHighValueKitchen");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchenAppliances", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHighValueKitchenId");

                    b.Property<string>("ApplianceTypeId");

                    b.Property<string>("ApplianceBrandId");

                    b.Property<int?>("NumberofAppliance");

                    b.HasKey("InspectionOrderPropertyHighValueKitchenId", "ApplianceTypeId", "ApplianceBrandId");

                    b.HasIndex("ApplianceBrandId")
                        .HasName("IX_InspectionOrderPropertyHighValueKitchenAppliances_ApplianceBrandId");

                    b.HasIndex("ApplianceTypeId")
                        .HasName("IX_InspectionOrderPropertyHighValueKitchenAppliances_ApplianceTypeId");

                    b.ToTable("InspectionOrderPropertyHighValueKitchenAppliances");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetail", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ArchitecturalStyleId");

                    b.Property<string>("ConstructionQualityId");

                    b.Property<string>("FoundationTypeId");

                    b.Property<string>("FramingTypeId");

                    b.Property<string>("HomeShapeId");

                    b.Property<int?>("NumberofStories");

                    b.Property<string>("PrimaryExteriorWallCoveringId");

                    b.Property<string>("PrimaryRoofCoveringId");

                    b.Property<string>("RoofTypeId");

                    b.Property<string>("SecondaryExteriorWallCoveringId");

                    b.Property<string>("SecondaryRoofCoveringId");

                    b.Property<string>("SlopeOfSiteId");

                    b.HasKey("Id");

                    b.HasIndex("ArchitecturalStyleId");

                    b.HasIndex("ConstructionQualityId");

                    b.HasIndex("FoundationTypeId");

                    b.HasIndex("FramingTypeId");

                    b.HasIndex("HomeShapeId");

                    b.HasIndex("PrimaryExteriorWallCoveringId");

                    b.HasIndex("PrimaryRoofCoveringId");

                    b.HasIndex("RoofTypeId");

                    b.HasIndex("SecondaryExteriorWallCoveringId");

                    b.HasIndex("SecondaryRoofCoveringId");

                    b.HasIndex("SlopeOfSiteId");

                    b.ToTable("InspectionOrderPropertyHomeDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetailLocales", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyHomeDetailId");

                    b.Property<string>("LocaleId");

                    b.HasKey("InspectionOrderPropertyHomeDetailId", "LocaleId");

                    b.HasIndex("LocaleId")
                        .HasName("IX_InspectionOrderPropertyHomeDetailLocales_LocaleId");

                    b.ToTable("InspectionOrderPropertyHomeDetailLocales");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ElectricalServiceAmperage");

                    b.Property<string>("InteriorDetailComment");

                    b.Property<string>("LaundryLocation");

                    b.Property<string>("WaterHeaterLocation");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyInteriorDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailFlooringTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyInteriorDetailId");

                    b.Property<string>("FlooringTypeId");

                    b.HasKey("InspectionOrderPropertyInteriorDetailId", "FlooringTypeId");

                    b.HasIndex("FlooringTypeId")
                        .HasName("IX_InspectionOrderPropertyInteriorDetailFlooringTypes_FlooringTypeId");

                    b.ToTable("InspectionOrderPropertyInteriorDetailFlooringTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCabinets", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyInteriorDetailId");

                    b.Property<string>("KitchenBathCabinetId");

                    b.HasKey("InspectionOrderPropertyInteriorDetailId", "KitchenBathCabinetId");

                    b.HasIndex("KitchenBathCabinetId")
                        .HasName("IX_InspectionOrderPropertyInteriorDetailKitchenBathCabinets_KitchenBathCabinetId");

                    b.ToTable("InspectionOrderPropertyInteriorDetailKitchenBathCabinets");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCounters", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyInteriorDetailId");

                    b.Property<string>("KitchenBathCounterId");

                    b.HasKey("InspectionOrderPropertyInteriorDetailId", "KitchenBathCounterId");

                    b.HasIndex("KitchenBathCounterId")
                        .HasName("IX_InspectionOrderPropertyInteriorDetailKitchenBathCounters_KitchenBathCounterId");

                    b.ToTable("InspectionOrderPropertyInteriorDetailKitchenBathCounters");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailQualityClassUpgrades", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyInteriorDetailId");

                    b.Property<string>("QualityClassUpgradeId");

                    b.HasKey("InspectionOrderPropertyInteriorDetailId", "QualityClassUpgradeId");

                    b.HasIndex("QualityClassUpgradeId")
                        .HasName("IX_InspectionOrderPropertyInteriorDetailQualityClassUpgrades_QualityClassUpgradeId");

                    b.ToTable("InspectionOrderPropertyInteriorDetailQualityClassUpgrades");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailTypeOfPlumbings", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyInteriorDetailId");

                    b.Property<string>("TypeOfPlumbingId");

                    b.HasKey("InspectionOrderPropertyInteriorDetailId", "TypeOfPlumbingId");

                    b.HasIndex("TypeOfPlumbingId")
                        .HasName("IX_InspectionOrderPropertyInteriorDetailTypeOfPlumbings_TypeOfPlumbingId");

                    b.ToTable("InspectionOrderPropertyInteriorDetailTypeOfPlumbings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessment", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyNonWildfireAssessment");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigation", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyNonWildfireAssessmentMitigation");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyNonWildfireId");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Description");

                    b.HasKey("InspectionOrderPropertyNonWildfireId", "ImageId");

                    b.HasIndex("ImageId")
                        .HasName("IX_InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations_ImageId");

                    b.ToTable("InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRequirements", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyNonWildfireAssessmentMitigationId");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Description");

                    b.HasKey("InspectionOrderPropertyNonWildfireAssessmentMitigationId", "ImageId");

                    b.HasIndex("ImageId")
                        .HasName("IX_InspectionOrderPropertyNonWildfireAssessmentMitigation_ImageId");

                    b.ToTable("InspectionOrderPropertyNonWildfireAssessmentMitigationRequirements");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhoto", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderPropertyPhoto");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhotoPhotos", b =>
                {
                    b.Property<Guid>("InspectionOrderPropertyPhotoId");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Description");

                    b.Property<string>("PhotoTypeId");

                    b.HasKey("InspectionOrderPropertyPhotoId", "ImageId");

                    b.HasIndex("ImageId")
                        .HasName("IX_InspectionOrderPropertyPhotoPhotos_ImageId");

                    b.HasIndex("PhotoTypeId")
                        .HasName("IX_InspectionOrderPropertyPhotoPhotos_PhotoTypeId");

                    b.ToTable("InspectionOrderPropertyPhotoPhotos");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessment");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentAccessAndFireProtection", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("AddressHardtoRead");

                    b.Property<string>("AddressReadabilityComment");

                    b.Property<string>("AlternateWaterSourceIfNoHydrant");

                    b.Property<bool>("BridgeConcern");

                    b.Property<string>("BridgeConcernComment");

                    b.Property<string>("FireDepartmentDistancetoHome");

                    b.Property<string>("FireDepartmentStaffingId");

                    b.Property<int?>("FireDepartmentTravelTimetoHome");

                    b.Property<string>("NearestFireHydrant");

                    b.Property<string>("RespondingFireDepartment");

                    b.Property<bool>("TimelyResponseConcern");

                    b.Property<string>("TimelyResponseConcernComment");

                    b.HasKey("Id");

                    b.HasIndex("FireDepartmentStaffingId");

                    b.ToTable("InspectionOrderWildfireAssessmentAccessAndFireProtection");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalcony", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("AttachedPorcheDeckorBalcony");

                    b.Property<string>("AttachedStructuresComment");

                    b.Property<bool>("CombustibleMaterialsONDeckBalconyPorch");

                    b.Property<bool>("CombustibleMaterialsUNDERDeckBalconyPorch");

                    b.Property<string>("CombustiblesONDeckBalconyPorchDescription");

                    b.Property<string>("CombustiblesUNDERDeckBalconyPorchDescription");

                    b.Property<string>("CoveringMaterial");

                    b.Property<bool>("DeckConditionConcern");

                    b.Property<bool>("PorchDeckBalconyCovered");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentDeckAndBalcony");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyDeckConditionConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentDeckAndBalconyId");

                    b.Property<string>("DeckConditionConcernDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentDeckAndBalconyId", "DeckConditionConcernDetailId");

                    b.HasIndex("DeckConditionConcernDetailId")
                        .HasName("IX_IoWaDeckAndBalconyDeckConditionConcernDetails_DeckConditionConcernDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentDeckAndBalconyDeckConditionConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyPorchDeckBalconyConstructions", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentDeckAndBalconyId");

                    b.Property<string>("PorchDeckBalconyConstructionId");

                    b.HasKey("InspectionOrderWildfireAssessmentDeckAndBalconyId", "PorchDeckBalconyConstructionId");

                    b.HasIndex("PorchDeckBalconyConstructionId")
                        .HasName("IX_IoWaDeckAndBalconyPorchDeckBalconyConstructions_PorchDeckBalconyConstructionId");

                    b.ToTable("InspectionOrderWildfireAssessmentDeckAndBalconyPorchDeckBalconyConstructions");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSiding", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("NonCombustibleSiding");

                    b.Property<string>("PrimaryExteriorWallCoveringId");

                    b.Property<string>("SecondaryExteriorWallCoveringId");

                    b.Property<string>("SidingConditionComment");

                    b.Property<bool>("SidingConditionConcern");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryExteriorWallCoveringId");

                    b.HasIndex("SecondaryExteriorWallCoveringId");

                    b.ToTable("InspectionOrderWildfireAssessmentExteriorSiding");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingOtherWallCoverings", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentExteriorSidingId");

                    b.Property<string>("OtherWallCoveringId");

                    b.HasKey("InspectionOrderWildfireAssessmentExteriorSidingId", "OtherWallCoveringId");

                    b.HasIndex("OtherWallCoveringId")
                        .HasName("IX_IoWaExteriorSidingOtherWallCoverings_OtherWallCoveringId");

                    b.ToTable("InspectionOrderWildfireAssessmentExteriorSidingOtherWallCoverings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingSidingConditionConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentExteriorSidingId");

                    b.Property<string>("SidingConditionConcernDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentExteriorSidingId", "SidingConditionConcernDetailId");

                    b.HasIndex("SidingConditionConcernDetailId")
                        .HasName("IX_IoWaExteriorSidingSidingConditionConcernDetails_SidingConditionConcernDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentExteriorSidingSidingConditionConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSource", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("ExternalFuelSource");

                    b.Property<int?>("ExternalFuelSourceDistanceFromHome");

                    b.Property<string>("FirePeventiveMeasure");

                    b.Property<string>("WoodStorageLocation");

                    b.Property<bool>("WoodStoveOrFireplace");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentExternalFuelSource");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSourceExternalFuelSourceTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentExternalFuelSourceId");

                    b.Property<string>("ExternalFuelSourceTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentExternalFuelSourceId", "ExternalFuelSourceTypeId");

                    b.HasIndex("ExternalFuelSourceTypeId")
                        .HasName("IX_IoWaExternalFuelSourceExternalFuelSourceTypes_ExternalFuelSourceTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentExternalFuelSourceExternalFuelSourceTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("FenceComment");

                    b.Property<bool>("FenceConditionConcern");

                    b.Property<bool>("FencingWithin30Feet");

                    b.Property<bool>("OtherAttachment");

                    b.Property<bool>("OtherDetachedStructure");

                    b.Property<bool>("Outbuilding");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachment");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFenceConditionConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId");

                    b.Property<string>("FenceConditionConcernDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId", "FenceConditionConcernDetailId");

                    b.HasIndex("FenceConditionConcernDetailId")
                        .HasName("IX_IoWaFencingAndOtherAttachmentFenceConditionConcernDetails_FenceConditionConcernDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFenceConditionConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFencingTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId");

                    b.Property<string>("FencingTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId", "FencingTypeId");

                    b.HasIndex("FencingTypeId")
                        .HasName("IX_IoWaFencingAndOtherAttachmentFencingTypes_FencingTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFencingTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherAttachmentTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId");

                    b.Property<string>("OtherAttachmentTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId", "OtherAttachmentTypeId");

                    b.HasIndex("OtherAttachmentTypeId")
                        .HasName("IX_IoWaFencingAndOtherAttachmentOtherAttachmentTypes_OtherAttachmentTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherAttachmentTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherDetachedStructuresDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId");

                    b.Property<string>("OtherDetachedStructuresDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId", "OtherDetachedStructuresDetailId");

                    b.HasIndex("OtherDetachedStructuresDetailId")
                        .HasName("IX_IoWaFencingAndOtherAttachmentOtherDetachedStructuresDetails_OtherDetachedStructuresDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherDetachedStructuresDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOutbuildingDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId");

                    b.Property<string>("OutbuildingDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId", "OutbuildingDetailId");

                    b.HasIndex("OutbuildingDetailId")
                        .HasName("IX_IoWaFencingAndOtherAttachmentOutbuildingDetails_OutbuildingDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOutbuildingDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFoundationToFrame", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("ElevatedwithCombustibleMaterial");

                    b.Property<string>("ElevatedwithCombustibleMaterialsComment");

                    b.Property<string>("FoundationComment");

                    b.Property<string>("FoundationTypeId");

                    b.Property<string>("FramingTypeId");

                    b.Property<bool>("OpeningsEmberEntry");

                    b.Property<string>("OpeningsEmberEntryComment");

                    b.HasKey("Id");

                    b.HasIndex("FoundationTypeId");

                    b.HasIndex("FramingTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentFoundationToFrame");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigation", b =>
                {
                    b.Property<Guid>("Id");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentMitigation");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRecommendations", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentMitigationId");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Description");

                    b.HasKey("InspectionOrderWildfireAssessmentMitigationId", "ImageId");

                    b.HasIndex("ImageId")
                        .HasName("IX_InspectionOrderWildfireAssessmentMitigationRecommendations_ImageId");

                    b.ToTable("InspectionOrderWildfireAssessmentMitigationRecommendations");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRequirements", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentMitigationId");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Description");

                    b.HasKey("InspectionOrderWildfireAssessmentMitigationId", "ImageId");

                    b.HasIndex("ImageId")
                        .HasName("IX_InspectionOrderWildfireAssessmentMitigationRequirements_ImageId");

                    b.ToTable("InspectionOrderWildfireAssessmentMitigationRequirements");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("CombustibleMaterialsOnRoof");

                    b.Property<string>("CombustibleMaterialsonRoofComment");

                    b.Property<bool>("EavesAllowEmberEntry");

                    b.Property<string>("EavesComment");

                    b.Property<string>("EavesTypeId");

                    b.Property<bool>("Gutter");

                    b.Property<string>("GutterComment");

                    b.Property<string>("PrimaryRoofCoveringId");

                    b.Property<string>("RoofTypeId");

                    b.Property<string>("SecondaryRoofCoveringId");

                    b.Property<string>("VentingMeshCoveringSizeComment");

                    b.Property<bool>("VentingOpeningAllowEmberEntry");

                    b.HasKey("Id");

                    b.HasIndex("EavesTypeId");

                    b.HasIndex("PrimaryRoofCoveringId");

                    b.HasIndex("RoofTypeId");

                    b.HasIndex("SecondaryRoofCoveringId");

                    b.ToTable("InspectionOrderWildfireAssessmentRoof");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofGutterTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentRoofId");

                    b.Property<string>("GutterTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentRoofId", "GutterTypeId");

                    b.HasIndex("GutterTypeId")
                        .HasName("IX_IoWaRoofGutterTypes_GutterTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentRoofGutterTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofOtherRoofCoverings", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentRoofId");

                    b.Property<string>("OtherRoofCoveringId");

                    b.HasKey("InspectionOrderWildfireAssessmentRoofId", "OtherRoofCoveringId");

                    b.HasIndex("OtherRoofCoveringId")
                        .HasName("IX_IoWaRoofOtherRoofCoverings_OtherRoofCoveringId");

                    b.ToTable("InspectionOrderWildfireAssessmentRoofOtherRoofCoverings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentRoofId");

                    b.Property<string>("RoofConcernDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentRoofId", "RoofConcernDetailId");

                    b.HasIndex("RoofConcernDetailId")
                        .HasName("IX_IoWaRoofRoofConcernDetails_RoofConcernDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentRoofRoofConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofVentings", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentRoofId");

                    b.Property<string>("RoofVentingId");

                    b.HasKey("InspectionOrderWildfireAssessmentRoofId", "RoofVentingId");

                    b.HasIndex("RoofVentingId")
                        .HasName("IX_IoWaRoofRoofVentings_RoofVentingId");

                    b.ToTable("InspectionOrderWildfireAssessmentRoofRoofVentings");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentSurrounding", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("AdditionalStructuresContributor");

                    b.Property<string>("AdditionalStructuresContributorComment");

                    b.Property<bool>("Combustible05Feet");

                    b.Property<string>("Combustible05FeetComment");

                    b.Property<bool>("Combustible30100Feet");

                    b.Property<string>("Combustible30100FeetComment");

                    b.Property<bool>("Combustible530Feet");

                    b.Property<string>("Combustible530FeetComment");

                    b.Property<bool>("NeighboringResidence");

                    b.Property<string>("NeighboringResidenceComment");

                    b.Property<bool>("TopographicalEnvironmentalContributor");

                    b.Property<string>("TopographicalEnvironmentalContributorComment");

                    b.Property<bool>("VolatileVegetationBeyond100Feet");

                    b.Property<string>("VolatileVegetationBeyond100FeetComment");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentSurrounding");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("ExteriorWindowCovering");

                    b.Property<bool>("InteriorWindowCovering");

                    b.Property<bool>("WindowConcern");

                    b.Property<string>("WindowNote");

                    b.Property<bool>("WindowScreen");

                    b.Property<bool>("WindowSusceptibletoFlame");

                    b.HasKey("Id");

                    b.ToTable("InspectionOrderWildfireAssessmentWindow");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowExteriorWindowCoveringTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("ExteriorWindowCoveringTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "ExteriorWindowCoveringTypeId");

                    b.HasIndex("ExteriorWindowCoveringTypeId")
                        .HasName("IX_IoWaWindowExteriorWindowCoveringTypes_ExteriorWindowCoveringTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowExteriorWindowCoveringTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowInteriorWindowCoveringTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("InteriorWindowCoveringTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "InteriorWindowCoveringTypeId");

                    b.HasIndex("InteriorWindowCoveringTypeId")
                        .HasName("IX_IoWaWindowInteriorWindowCoveringTypes_InteriorWindowCoveringTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowInteriorWindowCoveringTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowConcernDetails", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("WindowConcernDetailId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "WindowConcernDetailId");

                    b.HasIndex("WindowConcernDetailId")
                        .HasName("IX_IoWaWindowWindowConcernDetails_WindowConcernDetailId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowWindowConcernDetails");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowFramingTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("WindowFramingTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "WindowFramingTypeId");

                    b.HasIndex("WindowFramingTypeId")
                        .HasName("IX_IoWaWindowWindowFramingTypes_WindowFramingTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowWindowFramingTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowGlassTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("WindowGlassTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "WindowGlassTypeId");

                    b.HasIndex("WindowGlassTypeId")
                        .HasName("IX_IoWaWindowWindowGlassTypes_WindowGlassTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowWindowGlassTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowScreenTypes", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("WindowScreenTypeId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "WindowScreenTypeId");

                    b.HasIndex("WindowScreenTypeId")
                        .HasName("IX_IoWaWindowWindowScreenTypes_WindowScreenTypeId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowWindowScreenTypes");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowStyles", b =>
                {
                    b.Property<Guid>("InspectionOrderWildfireAssessmentWindowId");

                    b.Property<string>("WindowStyleId");

                    b.HasKey("InspectionOrderWildfireAssessmentWindowId", "WindowStyleId");

                    b.HasIndex("WindowStyleId")
                        .HasName("IX_IoWaWindowWindowStyles_WindowStyleId");

                    b.ToTable("InspectionOrderWildfireAssessmentWindowWindowStyles");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("InspectionStatus");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InteriorDoorType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("InteriorDoorType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InteriorWallCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("InteriorWallCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InteriorWindowCoveringType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("InteriorWindowCoveringType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.KitchenBathCabinet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("KitchenBathCabinet");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.KitchenBathCounter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("KitchenBathCounter");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.KitchenCabinet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("KitchenCabinet");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.KitchenCountertop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("KitchenCountertop");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.LightingType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("LightingType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Locale", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Locale");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.MiscellaneousExtraFeature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("MiscellaneousExtraFeature");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.MitigationStatus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("MitigationStatus");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OccupancyType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OccupancyType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OtherAttachmentType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OtherAttachmentType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OtherDetachedStructuresDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OtherDetachedStructuresDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OtherRoofCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OtherRoofCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OtherStructureConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OtherStructureConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OtherWallCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OtherWallCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.OutbuildingDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OutbuildingDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PhotoType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupId");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("PhotoType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PhotoTypeGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PhotoTypeGroup");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PlumbingConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PlumbingConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Policy", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Address");

                    b.Property<string>("AgencyName");

                    b.Property<string>("AgencyPhoneNumber");

                    b.Property<string>("AgentName");

                    b.Property<string>("AgentPhoneNumber");

                    b.Property<int?>("CoverageA");

                    b.Property<int?>("E2ValueReplacementCostValue");

                    b.Property<decimal?>("ITVPercentage");

                    b.Property<DateTime?>("InspectionDate");

                    b.Property<string>("InspectionStatusId");

                    b.Property<string>("InsuredCity");

                    b.Property<string>("InsuredEmail");

                    b.Property<string>("InsuredFirstName");

                    b.Property<string>("InsuredLastName");

                    b.Property<string>("InsuredMiddleName");

                    b.Property<string>("InsuredState");

                    b.Property<string>("InsuredZipCode");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("MitigationStatusId");

                    b.Property<string>("PolicyNumber");

                    b.Property<string>("PropertyValueId");

                    b.Property<bool>("WildfireAssessmentRequired");

                    b.HasKey("Id");

                    b.HasIndex("InspectionStatusId");

                    b.HasIndex("MitigationStatusId");

                    b.HasIndex("PropertyValueId");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PolicyPremiumCredit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PolicyPremiumCredit");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PorchDeckBalconyConstruction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PorchDeckBalconyConstruction");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PrimaryExteriorWallCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PrimaryExteriorWallCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PrimaryRoofCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PrimaryRoofCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PropertyValue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("PropertyValue");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.QualityClassUpgrade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("QualityClassUpgrade");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.RoofConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("RoofConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.RoofType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("RoofType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.RoofVenting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("RoofVenting");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.RoomWithCabinetry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("RoomWithCabinetry");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.SecondaryExteriorWallCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SecondaryExteriorWallCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.SecondaryRoofCovering", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SecondaryRoofCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.SidingConditionConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SidingConditionConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.SlopeOfSite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SlopeOfSite");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Staircase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Staircase");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.SurroundingAreaConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SurroundingAreaConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.TubAndShower", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("TubAndShower");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.TypeOfPlumbing", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("TypeOfPlumbing");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WallTrim", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WallTrim");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WildfireCredit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WildfireCredit");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowBrand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowBrand");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowConcernDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowConcernDetail");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowFramingType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowFramingType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowGlassType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowGlassType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowScreenType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowScreenType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.WindowStyle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("WindowStyle");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.SmokeOnlyAlarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SmokeOnlyAlarm");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.SmokeOnlyAlarmType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SmokeOnlyAlarmType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.State", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.Views.ApplicationUserView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("ProfilePhotoPath");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("RoleName");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<string>("ThumbnailPath");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("vwUserManagementList");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.Views.InspectionOrderNotesView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateModified");

                    b.Property<Guid>("InspectionOrderId");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.ToTable("vwInspectionOrderNotesList");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.Views.InspectionOrderView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AssignedDate");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("DateDifference");

                    b.Property<DateTime?>("InspectionDate");

                    b.Property<string>("Inspector");

                    b.Property<string>("InsuredName");

                    b.Property<string>("Location");

                    b.Property<string>("MitigationStatus");

                    b.Property<string>("PolicyNumber");

                    b.Property<string>("State");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("vwOrderManagementList");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("ProfilePhotoId");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfilePhotoId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Type");

                    b.Property<Guid>("UserId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.City", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById");

                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderNote", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", "InspectionOrder")
                        .WithMany("Notes")
                        .HasForeignKey("InspectionOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", "InspectionOrder")
                        .WithOne("Property")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposure", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.CustomerOnSite", "CustomerOnSite")
                        .WithMany()
                        .HasForeignKey("CustomerOnSiteId")
                        .HasConstraintName("FK_InspectionOrderPropertyAdditionalExposure_CustomerOnSite");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.DogTemperament", "DogTemperament")
                        .WithMany()
                        .HasForeignKey("DogTemperamentId")
                        .HasConstraintName("FK_InspectionOrderPropertyAdditionalExposure_DogTemperament");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Employee10HoursPerWeek", "Employee10HoursPerWeek")
                        .WithMany()
                        .HasForeignKey("Employee10HoursPerWeekId")
                        .HasConstraintName("FK_InspectionOrderPropertyAdditionalExposure_Employee10HoursPerWeek");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("AdditionalExposure")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposure", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyAdditionalExposure")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.BearInvasionConcernDetail", "BearInvasionConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails", "BearInvasionConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails_BearInvasionConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyAdditionalExposure", "InspectionOrderPropertyAdditionalExposure")
                        .WithMany("BearInvasionConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyAdditionalExposureId")
                        .HasConstraintName("FK_InspectionOrderPropertyAdditionalExposureBearInvasionConcernDetails_InspectionOrderPropertyAdditionalExposure")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("BuildingConcern")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernElectricalConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ElectricalConcernDetail", "ElectricalConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernElectricalConcernDetails", "ElectricalConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernElectricalConcernDetails_ElectricalConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("ElectricalConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernElectricalConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ExteriorBuildingConcernDetail", "ExteriorBuildingConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails", "ExteriorBuildingConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails_ExteriorBuildingConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("ExteriorBuildingConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernExteriorBuildingConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("OtherStructureConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherStructureConcernDetail", "OtherStructureConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails", "OtherStructureConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernOtherStructureConcernDetails_OtherStructureConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernPlumbingConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("PlumbingConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernPlumbingConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PlumbingConcernDetail", "PlumbingConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernPlumbingConcernDetails", "PlumbingConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernPlumbingConcernDetails_PlumbingConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernRoofConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("RoofConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernRoofConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoofConcernDetail", "RoofConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernRoofConcernDetails", "RoofConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernRoofConcernDetails_RoofConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcern", "InspectionOrderPropertyBuildingConcern")
                        .WithMany("SurroundingAreaConcernDetails")
                        .HasForeignKey("InspectionOrderPropertyBuildingConcernId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails_InspectionOrderPropertyBuildingConcern")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SurroundingAreaConcernDetail", "SurroundingAreaConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails", "SurroundingAreaConcernDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyBuildingConcernSurroundingAreaConcernDetails_SurroundingAreaConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructure", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("DetachedStructure")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructure", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyDetachedStructure")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructure", "InspectionOrderPropertyDetachedStructure")
                        .WithMany("OtherDetachedStructuresDetails")
                        .HasForeignKey("InspectionOrderPropertyDetachedStructureId")
                        .HasConstraintName("FK_InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails_InspectionOrderPropertyDetachedStructure")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherDetachedStructuresDetail", "OtherDetachedStructuresDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails", "OtherDetachedStructuresDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyDetachedStructureOtherDetachedStructuresDetails_OtherDetachedStructuresDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOutbuildingDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructure", "InspectionOrderPropertyDetachedStructure")
                        .WithMany("OutbuildingDetails")
                        .HasForeignKey("InspectionOrderPropertyDetachedStructureId")
                        .HasConstraintName("FK_InspectionOrderPropertyDetachedStructureOutbuildingDetails_InspectionOrderPropertyDetachedStructure")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OutbuildingDetail", "OutbuildingDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyDetachedStructureOutbuildingDetails", "OutbuildingDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyDetachedStructureOutbuildingDetails_OutbuildingDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.BurglarAlarm", "BurglarAlarm")
                        .WithMany()
                        .HasForeignKey("BurglarAlarmId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_BurglarAlarm");

                    b.HasOne("Rivington.IG.Domain.Models.BurglarAlarmType", "BurglarAlarmType")
                        .WithMany()
                        .HasForeignKey("BurglarAlarmTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_BurglarAlarmType");

                    b.HasOne("Rivington.IG.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_City");

                    b.HasOne("Rivington.IG.Domain.Models.FireAlarm", "FireAlarm")
                        .WithMany()
                        .HasForeignKey("FireAlarmId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_FireAlarm");

                    b.HasOne("Rivington.IG.Domain.Models.FireAlarmType", "FireAlarmType")
                        .WithMany()
                        .HasForeignKey("FireAlarmTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_FireAlarmType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("General")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyGeneral")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OccupancyType", "OccupancyType")
                        .WithMany()
                        .HasForeignKey("OccupancyTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_OccupancyType");

                    b.HasOne("Rivington.IG.Domain.Models.SmokeOnlyAlarm", "SmokeOnlyAlarm")
                        .WithMany()
                        .HasForeignKey("SmokeOnlyAlarmId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_SmokeOnlyAlarm");

                    b.HasOne("Rivington.IG.Domain.Models.SmokeOnlyAlarmType", "SmokeOnlyAlarmType")
                        .WithMany()
                        .HasForeignKey("SmokeOnlyAlarmTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_SmokeOnlyAlarmType");

                    b.HasOne("Rivington.IG.Domain.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneral_State");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralDomesticHelpTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.DomesticHelpType", "DomesticHelpType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralDomesticHelpTypes", "DomesticHelpTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralDomesticHelpTypes_DomesticHelpType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", "InspectionOrderPropertyGeneral")
                        .WithMany("DomesticHelpTypes")
                        .HasForeignKey("InspectionOrderPropertyGeneralId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralDomesticHelpTypes_InspectionOrderPropertyGeneral")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralPolicyPremiumCredits", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", "InspectionOrderPropertyGeneral")
                        .WithMany("PolicyPremiumCredits")
                        .HasForeignKey("InspectionOrderPropertyGeneralId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralPolicyPremiumCredits_InspectionOrderPropertyGeneral")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PolicyPremiumCredit", "PolicyPremiumCredit")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralPolicyPremiumCredits", "PolicyPremiumCreditId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralPolicyPremiumCredits_PolicyPremiumCredit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralWildfireCredits", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneral", "InspectionOrderPropertyGeneral")
                        .WithMany("WildfireCredits")
                        .HasForeignKey("InspectionOrderPropertyGeneralId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralWildfireCredits_InspectionOrderPropertyGeneral")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WildfireCredit", "WildfireCredit")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyGeneralWildfireCredits", "WildfireCreditId")
                        .HasConstraintName("FK_InspectionOrderPropertyGeneralWildfireCredits_WildfireCredit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("HighValueBath")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomCounters", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.BathroomCounter", "BathroomCounter")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomCounters", "BathroomCounterId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomCounters_BathroomCounter")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "InspectionOrderPropertyHighValueBath")
                        .WithMany("BathroomCounters")
                        .HasForeignKey("InspectionOrderPropertyHighValueBathId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomCounters_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFixtures", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.BathroomFixture", "BathroomFixture")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFixtures", "BathroomFixtureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomFixtures_BathroomFixture")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "InspectionOrderPropertyHighValueBath")
                        .WithMany("BathroomFixtures")
                        .HasForeignKey("InspectionOrderPropertyHighValueBathId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomFixtures_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFloors", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.BathroomFloor", "BathroomFloor")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomFloors", "BathroomFloorId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomFloors_BathroomFloor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "InspectionOrderPropertyHighValueBath")
                        .WithMany("BathroomFloors")
                        .HasForeignKey("InspectionOrderPropertyHighValueBathId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomFloors_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomVanities", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.BathroomVanity", "BathroomVanity")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathBathroomVanities", "BathroomVanityId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomVanities_BathroomVanity")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "InspectionOrderPropertyHighValueBath")
                        .WithMany("BathroomVanities")
                        .HasForeignKey("InspectionOrderPropertyHighValueBathId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathBathroomVanities_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathTubsAndShowers", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBath", "InspectionOrderPropertyHighValueBath")
                        .WithMany("TubsAndShowers")
                        .HasForeignKey("InspectionOrderPropertyHighValueBathId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathTubsAndShowers_InspectionOrderPropertyHighValueBath")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.TubAndShower", "TubAndShower")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueBathTubsAndShowers", "TubAndShowerId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueBathTubsAndShowers_TubAndShower")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ChimneyType", "ChimneyType")
                        .WithMany()
                        .HasForeignKey("ChimneyTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeiling_ChimneyType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("HighValueFloorToCeiling")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingCeilings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Ceiling", "Ceiling")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingCeilings", "CeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingCeilings_Ceiling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("Ceilings")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingCeilings_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FloorCovering", "FloorCovering")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings", "FloorCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings_FloorCovering")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("FloorCoverings")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingFloorCoverings_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("InteriorWallCoverings")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InteriorWallCovering", "InteriorWallCovering")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings", "InteriorWallCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingInteriorWallCoverings_InteriorWallCovering")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWallTrims", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("WallTrims")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWallTrims_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WallTrim", "WallTrim")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWallTrims", "WallTrimId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWallTrims_WallTrim")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowBrands", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("WindowBrands")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWindowBrands_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowBrand", "WindowBrand")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowBrands", "WindowBrandId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWindowBrands_WindowBrand")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowStyles", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeiling", "InspectionOrderPropertyHighValueFloorToCeiling")
                        .WithMany("WindowStyles")
                        .HasForeignKey("InspectionOrderPropertyHighValueFloorToCeilingId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWindowStyles_InspectionOrderPropertyHighValueFloorToCeiling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowStyle", "WindowStyle")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueFloorToCeilingWindowStyles", "WindowStyleId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueFloorToCeilingWindowStyles_WindowStyle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("HighValueInteriorFeature")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.DoorHardware", "DoorHardware")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares", "DoorHardwareId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares_DoorHardware")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("DoorHardwares")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureDoorHardwares_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FireplaceType", "FireplaceType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes", "FireplaceTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes_FireplaceType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("FireplaceTypes")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureFireplaceTypes_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("InteriorDoorTypes")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InteriorDoorType", "InteriorDoorType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes", "InteriorDoorTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureInteriorDoorTypes_InteriorDoorType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureLightingTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("LightingTypes")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureLightingTypes_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.LightingType", "LightingType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureLightingTypes", "LightingTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureLightingTypes_LightingType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("MiscellaneousExtraFeatures")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.MiscellaneousExtraFeature", "MiscellaneousExtraFeature")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures", "MiscellaneousExtraFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureMiscellaneousExtraFeatures_MiscellaneousExtraFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("RoomWithCabinetrys")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoomWithCabinetry", "RoomWithCabinetry")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry", "RoomWithCabinetryId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureRoomsWithCabinetry_RoomWithCabinetry")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureStaircases", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeature", "InspectionOrderPropertyHighValueInteriorFeature")
                        .WithMany("Staircases")
                        .HasForeignKey("InspectionOrderPropertyHighValueInteriorFeatureId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureStaircases_InspectionOrderPropertyHighValueInteriorFeature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Staircase", "Staircase")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueInteriorFeatureStaircases", "StaircaseId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueInteriorFeatureStaircases_Staircase")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchen", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("HighValueKitchen")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchen", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyHighValueKitchen")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.KitchenCabinet", "KitchenCabinet")
                        .WithMany()
                        .HasForeignKey("KitchenCabinetId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueKitchen_KitchenCabinet");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.KitchenCountertop", "KitchenCountertop")
                        .WithMany()
                        .HasForeignKey("KitchenCountertopId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueKitchen_KitchenCountertop");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchenAppliances", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ApplianceBrand", "ApplianceBrand")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchenAppliances", "ApplianceBrandId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueKitchenAppliances_ApplianceBrand")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.ApplianceType", "ApplianceType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchenAppliances", "ApplianceTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueKitchenAppliances_ApplianceType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHighValueKitchen", "InspectionOrderPropertyHighValueKitchen")
                        .WithMany("Appliances")
                        .HasForeignKey("InspectionOrderPropertyHighValueKitchenId")
                        .HasConstraintName("FK_InspectionOrderPropertyHighValueKitchenAppliances_InspectionOrderPropertyHighValueKitchen")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetail", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ArchitecturalStyle", "ArchitecturalStyle")
                        .WithMany()
                        .HasForeignKey("ArchitecturalStyleId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_ArchitecturalStyle");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ConstructionQuality", "ConstructionQuality")
                        .WithMany()
                        .HasForeignKey("ConstructionQualityId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_ConstructionQuality");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FoundationType", "FoundationType")
                        .WithMany()
                        .HasForeignKey("FoundationTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_FoundationType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FramingType", "FramingType")
                        .WithMany()
                        .HasForeignKey("FramingTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_FramingType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.HomeShape", "HomeShape")
                        .WithMany()
                        .HasForeignKey("HomeShapeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_HomeShape");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("HomeDetail")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetail", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyHomeDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PrimaryExteriorWallCovering", "PrimaryExteriorWallCovering")
                        .WithMany()
                        .HasForeignKey("PrimaryExteriorWallCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_PrimaryExteriorWallCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PrimaryRoofCovering", "PrimaryRoofCovering")
                        .WithMany()
                        .HasForeignKey("PrimaryRoofCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_PrimaryRoofCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoofType", "RoofType")
                        .WithMany()
                        .HasForeignKey("RoofTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_RoofType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SecondaryExteriorWallCovering", "SecondaryExteriorWallCovering")
                        .WithMany()
                        .HasForeignKey("SecondaryExteriorWallCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_SecondaryExteriorWallCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SecondaryRoofCovering", "SecondaryRoofCovering")
                        .WithMany()
                        .HasForeignKey("SecondaryRoofCoveringId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_SecondaryRoofCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SlopeOfSite", "SlopeOfSite")
                        .WithMany()
                        .HasForeignKey("SlopeOfSiteId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetail_SlopeOfSite");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetailLocales", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetail", "InspectionOrderPropertyHomeDetail")
                        .WithMany("Locales")
                        .HasForeignKey("InspectionOrderPropertyHomeDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetailLocales_InspectionOrderPropertyHomeDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Locale", "Locale")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyHomeDetailLocales", "LocaleId")
                        .HasConstraintName("FK_InspectionOrderPropertyHomeDetailLocales_Locale")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("InteriorDetail")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "Id")
                        .HasConstraintName("FK_InspectionOrderProperty_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailFlooringTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FlooringType", "FlooringType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailFlooringTypes", "FlooringTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailFlooringTypes_FlooringType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "InspectionOrderPropertyInteriorDetail")
                        .WithMany("FlooringTypes")
                        .HasForeignKey("InspectionOrderPropertyInteriorDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailFlooringTypes_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCabinets", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "InspectionOrderPropertyInteriorDetail")
                        .WithMany("KitchenBathCabinets")
                        .HasForeignKey("InspectionOrderPropertyInteriorDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailKitchenBathCabinets_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.KitchenBathCabinet", "KitchenBathCabinet")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCabinets", "KitchenBathCabinetId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailKitchenBathCabinets_KitchenBathCabinet")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCounters", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "InspectionOrderPropertyInteriorDetail")
                        .WithMany("KitchenBathCounters")
                        .HasForeignKey("InspectionOrderPropertyInteriorDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailKitchenBathCounters_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.KitchenBathCounter", "KitchenBathCounter")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailKitchenBathCounters", "KitchenBathCounterId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailKitchenBathCounters_KitchenBathCounter")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailQualityClassUpgrades", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "InspectionOrderPropertyInteriorDetail")
                        .WithMany("QualityClassUpgrades")
                        .HasForeignKey("InspectionOrderPropertyInteriorDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailQualityClassUpgrades_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.QualityClassUpgrade", "QualityClassUpgrade")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailQualityClassUpgrades", "QualityClassUpgradeId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailQualityClassUpgrades_QualityClassUpgrade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailTypeOfPlumbings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetail", "InspectionOrderPropertyInteriorDetail")
                        .WithMany("TypeOfPlumbings")
                        .HasForeignKey("InspectionOrderPropertyInteriorDetailId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailTypeOfPlumbings_InspectionOrderPropertyInteriorDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.TypeOfPlumbing", "TypeOfPlumbing")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyInteriorDetailTypeOfPlumbings", "TypeOfPlumbingId")
                        .HasConstraintName("FK_InspectionOrderPropertyInteriorDetailTypeOfPlumbings_TypeOfPlumbing")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessment", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderProperty", "InspectionOrderProperty")
                        .WithOne("NonWildfireAssessment")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessment", "Id")
                        .HasConstraintName("FK_InspectionOrderPropertyNonWildfireAssessment_InspectionOrder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigation", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessment", "InspectionOrderNonWildfireAssessment")
                        .WithOne("Mitigation")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigation", "Id")
                        .HasConstraintName("FK_InspectionOrderNonWildfireAssessment_IoNwaMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations", "ImageId")
                        .HasConstraintName("FK_InspectionOrderPropertyNonWildfireAssessmentMitigationRecommendations_Image")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigation", "InspectionOrderPropertyNonWildfireAssessmentMitigation")
                        .WithMany("Recommendations")
                        .HasForeignKey("InspectionOrderPropertyNonWildfireId")
                        .HasConstraintName("FK_IoNwaMitigationRecommendations_InspectionOrderPropertyNonWildfireAssessmentMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRequirements", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigationRequirements", "ImageId")
                        .HasConstraintName("FK_InspectionOrderPropertyNonWildfireAssessmentMitigation_Image")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyNonWildfireAssessmentMitigation", "InspectionOrderPropertyNonWildfireAssessmentMitigation")
                        .WithMany("Requirements")
                        .HasForeignKey("InspectionOrderPropertyNonWildfireAssessmentMitigationId")
                        .HasConstraintName("FK_IoNwaMitigationRequirements_InspectionOrderPropertyNonWildfireAssessmentMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhoto", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", "InspectionOrder")
                        .WithOne("PropertyPhoto")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhoto", "Id")
                        .HasConstraintName("FK_InspectionOrderPropertyPhoto_InspectionOrder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhotoPhotos", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhotoPhotos", "ImageId")
                        .HasConstraintName("FK_InspectionOrderPropertyPhotoPhotos_Image")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhoto", "InspectionOrderPropertyPhoto")
                        .WithMany("Photos")
                        .HasForeignKey("InspectionOrderPropertyPhotoId")
                        .HasConstraintName("FK_InspectionOrderPropertyPhotoPhotos_InspectionOrderPropertyPhoto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PhotoType", "PhotoType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderPropertyPhotoPhotos", "PhotoTypeId")
                        .HasConstraintName("FK_InspectionOrderPropertyPhotoPhotos_PhotoType");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", "InspectionOrder")
                        .WithOne("WildfireAssessment")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_InspectionOrder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentAccessAndFireProtection", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FireDepartmentStaffing", "FireDepartmentStaffing")
                        .WithMany()
                        .HasForeignKey("FireDepartmentStaffingId")
                        .HasConstraintName("FK_IoWaAccessAndFireProtection_FireDepartmentStaffing");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("AccessAndFireProtection")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentAccessAndFireProtection", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaAccessAndFireProtection")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalcony", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("DeckAndBalcony")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalcony", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaDeckAndBalcony")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyDeckConditionConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.DeckConditionConcernDetail", "DeckConditionConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyDeckConditionConcernDetails", "DeckConditionConcernDetailId")
                        .HasConstraintName("FK_IoWaDeckAndBalconyDeckConditionConcernDetails_DeckConditionConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalcony", "InspectionOrderWildfireAssessmentDeckAndBalcony")
                        .WithMany("DeckConditionConcernsDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentDeckAndBalconyId")
                        .HasConstraintName("FK_IoWaDeckAndBalconyDeckConditionConcernDetails_InspectionOrderWildfireAssessmentDeckAndBalcony")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyPorchDeckBalconyConstructions", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalcony", "InspectionOrderWildfireAssessmentDeckAndBalcony")
                        .WithMany("PorchDeckBalconyConstructions")
                        .HasForeignKey("InspectionOrderWildfireAssessmentDeckAndBalconyId")
                        .HasConstraintName("FK_IoWaDeckAndBalconyPorchDeckBalconyConstructions_InspectionOrderWildfireAssessmentDeckAndBalcony")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PorchDeckBalconyConstruction", "PorchDeckBalconyConstruction")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentDeckAndBalconyPorchDeckBalconyConstructions", "PorchDeckBalconyConstructionId")
                        .HasConstraintName("FK_IoWaDeckAndBalconyPorchDeckBalconyConstructions_PorchDeckBalconyConstruction")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSiding", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("ExteriorSiding")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSiding", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaExteriorSiding")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PrimaryExteriorWallCovering", "PrimaryExteriorWallCovering")
                        .WithMany()
                        .HasForeignKey("PrimaryExteriorWallCoveringId")
                        .HasConstraintName("FK_IoWaExteriorSiding_PrimaryExteriorWallCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SecondaryExteriorWallCovering", "SecondaryExteriorWallCovering")
                        .WithMany()
                        .HasForeignKey("SecondaryExteriorWallCoveringId")
                        .HasConstraintName("FK_IoWaExteriorSiding_SecondaryExteriorWallCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingOtherWallCoverings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSiding", "InspectionOrderWildfireAssessmentExteriorSiding")
                        .WithMany("OtherWallCoverings")
                        .HasForeignKey("InspectionOrderWildfireAssessmentExteriorSidingId")
                        .HasConstraintName("FK_IoWaExteriorSidingOtherWallCoverings_InspectionOrderWildfireAssessmentExteriorSiding")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherWallCovering", "OtherWallCovering")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingOtherWallCoverings", "OtherWallCoveringId")
                        .HasConstraintName("FK_IoWaExteriorSidingOtherWallCoverings_OtherWallCovering")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingSidingConditionConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSiding", "InspectionOrderWildfireAssessmentExteriorSiding")
                        .WithMany("SidingConditionConcernDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentExteriorSidingId")
                        .HasConstraintName("FK_IoWaExteriorSidingSidingConditionConcernDetails_InspectionOrderWildfireAssessmentExteriorSiding")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SidingConditionConcernDetail", "SidingConditionConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExteriorSidingSidingConditionConcernDetails", "SidingConditionConcernDetailId")
                        .HasConstraintName("FK_IoWaExteriorSidingSidingConditionConcernDetails_SidingConditionConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSource", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("ExternalFuelSource")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSource", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaExternalFuelSource")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSourceExternalFuelSourceTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ExternalFuelSourceType", "ExternalFuelSourceType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSourceExternalFuelSourceTypes", "ExternalFuelSourceTypeId")
                        .HasConstraintName("FK_IoWaExternalFuelSourceExternalFuelSourceTypes_ExternalFuelSourceType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentExternalFuelSource", "InspectionOrderWildfireAssessmentExternalFuelSource")
                        .WithMany("ExternalFuelSourceTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentExternalFuelSourceId")
                        .HasConstraintName("FK_IoWaExternalFuelSourceExternalFuelSourceTypes_InspectionOrderWildfireAssessmentExternalFuelSource")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("FencingAndOtherAttachment")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFenceConditionConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FenceConditionConcernDetail", "FenceConditionConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFenceConditionConcernDetails", "FenceConditionConcernDetailId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentFenceConditionConcernDetails_FenceConditionConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .WithMany("FenceConditionConcernDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentFenceConditionConcernDetails_InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFencingTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FencingType", "FencingType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentFencingTypes", "FencingTypeId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentFencingTypes_FencingType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .WithMany("FencingTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentFencingTypes_InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherAttachmentTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .WithMany("OtherAttachmentTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOtherAttachmentTypes_InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherAttachmentType", "OtherAttachmentType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherAttachmentTypes", "OtherAttachmentTypeId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOtherAttachmentTypes_OtherAttachmentType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherDetachedStructuresDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .WithMany("OtherDetachedStructuresDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOtherDetachedStructuresDetails_InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherDetachedStructuresDetail", "OtherDetachedStructuresDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOtherDetachedStructuresDetails", "OtherDetachedStructuresDetailId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOtherDetachedStructuresDetails_OtherDetachedStructuresDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOutbuildingDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachment", "InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .WithMany("OutbuildingDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentFencingAndOtherAttachmentId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOutbuildingDetails_InspectionOrderWildfireAssessmentFencingAndOtherAttachment")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OutbuildingDetail", "OutbuildingDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFencingAndOtherAttachmentOutbuildingDetails", "OutbuildingDetailId")
                        .HasConstraintName("FK_IoWaFencingAndOtherAttachmentOutbuildingDetails_OutbuildingDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFoundationToFrame", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FoundationType", "FoundationType")
                        .WithMany()
                        .HasForeignKey("FoundationTypeId")
                        .HasConstraintName("FK_IoWaFoundationToFrame_FoundationType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.FramingType", "FramingType")
                        .WithMany()
                        .HasForeignKey("FramingTypeId")
                        .HasConstraintName("FK_IoWaFoundationToFrame_FramingType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("FoundationToFrame")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentFoundationToFrame", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaFoundationToFrame")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigation", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("Mitigation")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigation", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRecommendations", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRecommendations", "ImageId")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessmentMitigationRecommendations_Image")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigation", "InspectionOrderWildfireAssessmentMitigation")
                        .WithMany("Recommendations")
                        .HasForeignKey("InspectionOrderWildfireAssessmentMitigationId")
                        .HasConstraintName("FK_IoWaMitigationRecommendations_InspectionOrderWildfireAssessmentMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRequirements", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigationRequirements", "ImageId")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessmentMitigationRequirements_Image")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentMitigation", "InspectionOrderWildfireAssessmentMitigation")
                        .WithMany("Requirements")
                        .HasForeignKey("InspectionOrderWildfireAssessmentMitigationId")
                        .HasConstraintName("FK_IoWaMitigationRequirements_InspectionOrderWildfireAssessmentMitigation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.EavesType", "EavesType")
                        .WithMany()
                        .HasForeignKey("EavesTypeId")
                        .HasConstraintName("FK_IoWaRoof_EavesType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("Roof")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaRoof")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PrimaryRoofCovering", "PrimaryRoofCovering")
                        .WithMany()
                        .HasForeignKey("PrimaryRoofCoveringId")
                        .HasConstraintName("FK_IoWaRoof_PrimaryRoofCovering");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoofType", "RoofType")
                        .WithMany()
                        .HasForeignKey("RoofTypeId")
                        .HasConstraintName("FK_IoWaRoof_RoofType");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.SecondaryRoofCovering", "SecondaryRoofCovering")
                        .WithMany()
                        .HasForeignKey("SecondaryRoofCoveringId")
                        .HasConstraintName("FK_IoWaRoof_SecondaryRoofCovering");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofGutterTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.GutterType", "GutterType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofGutterTypes", "GutterTypeId")
                        .HasConstraintName("FK_IoWaRoofGutterTypes_GutterType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", "InspectionOrderWildfireAssessmentRoof")
                        .WithMany("GutterTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentRoofId")
                        .HasConstraintName("FK_IoWaRoofGutterTypes_InspectionOrderWildfireAssessmentRoof")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofOtherRoofCoverings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", "InspectionOrderWildfireAssessmentRoof")
                        .WithMany("OtherRoofCoverings")
                        .HasForeignKey("InspectionOrderWildfireAssessmentRoofId")
                        .HasConstraintName("FK_IoWaRoofOtherRoofCoverings_InspectionOrderWildfireAssessmentRoof")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.OtherRoofCovering", "OtherRoofCovering")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofOtherRoofCoverings", "OtherRoofCoveringId")
                        .HasConstraintName("FK_IoWaRoofOtherRoofCoverings_OtherRoofCovering")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", "InspectionOrderWildfireAssessmentRoof")
                        .WithMany("RoofConcernDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentRoofId")
                        .HasConstraintName("FK_IoWaRoofRoofConcernDetails_InspectionOrderWildfireAssessmentRoof")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoofConcernDetail", "RoofConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofConcernDetails", "RoofConcernDetailId")
                        .HasConstraintName("FK_IoWaRoofRoofConcernDetails_RoofConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofVentings", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoof", "InspectionOrderWildfireAssessmentRoof")
                        .WithMany("RoofVentings")
                        .HasForeignKey("InspectionOrderWildfireAssessmentRoofId")
                        .HasConstraintName("FK_IoWaRoofRoofVentings_InspectionOrderWildfireAssessmentRoof")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.RoofVenting", "RoofVenting")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentRoofRoofVentings", "RoofVentingId")
                        .HasConstraintName("FK_IoWaRoofRoofVentings_RoofVenting")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentSurrounding", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("Surrounding")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentSurrounding", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaSurrounding")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessment", "InspectionOrderWildfireAssessment")
                        .WithOne("Window")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "Id")
                        .HasConstraintName("FK_InspectionOrderWildfireAssessment_IoWaWindow")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowExteriorWindowCoveringTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.ExteriorWindowCoveringType", "ExteriorWindowCoveringType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowExteriorWindowCoveringTypes", "ExteriorWindowCoveringTypeId")
                        .HasConstraintName("FK_IoWaWindowExteriorWindowCoveringTypes_ExteriorWindowCoveringType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("ExteriorWindowCoveringTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowExteriorWindowCoveringTypes_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowInteriorWindowCoveringTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("InteriorWindowCoveringTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowInteriorWindowCoveringTypes_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InteriorWindowCoveringType", "InteriorWindowCoveringType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowInteriorWindowCoveringTypes", "InteriorWindowCoveringTypeId")
                        .HasConstraintName("FK_IoWaWindowInteriorWindowCoveringTypes_InteriorWindowCoveringType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowConcernDetails", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("WindowConcernsDetails")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowWindowConcernDetails_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowConcernDetail", "WindowConcernDetail")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowConcernDetails", "WindowConcernDetailId")
                        .HasConstraintName("FK_IoWaWindowWindowConcernDetails_WindowConcernDetail")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowFramingTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("WindowFramingTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowWindowFramingTypes_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowFramingType", "WindowFramingType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowFramingTypes", "WindowFramingTypeId")
                        .HasConstraintName("FK_IoWaWindowWindowFramingTypes_WindowFramingType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowGlassTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("WindowGlassTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowWindowGlassTypes_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowGlassType", "WindowGlassType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowGlassTypes", "WindowGlassTypeId")
                        .HasConstraintName("FK_IoWaWindowWindowGlassTypes_WindowGlassType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowScreenTypes", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("WindowScreenTypes")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowWindowScreenTypes_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowScreenType", "WindowScreenType")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowScreenTypes", "WindowScreenTypeId")
                        .HasConstraintName("FK_IoWaWindowWindowScreenTypes_WindowScreenType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowStyles", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindow", "InspectionOrderWildfireAssessmentWindow")
                        .WithMany("WindowStyles")
                        .HasForeignKey("InspectionOrderWildfireAssessmentWindowId")
                        .HasConstraintName("FK_IoWaWindowWindowStyles_InspectionOrderWildfireAssessmentWindow")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.WindowStyle", "WindowStyle")
                        .WithOne()
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.InspectionOrderWildfireAssessmentWindowWindowStyles", "WindowStyleId")
                        .HasConstraintName("FK_IoWaWindowWindowStyles_WindowStyle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.PhotoType", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PhotoTypeGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Rivington.IG.Domain.Models.OrderManagement.Policy", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionOrder", "InspectionOrder")
                        .WithOne("Policy")
                        .HasForeignKey("Rivington.IG.Domain.Models.OrderManagement.Policy", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.InspectionStatus", "InspectionStatus")
                        .WithMany()
                        .HasForeignKey("InspectionStatusId");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.MitigationStatus", "MitigationStatus")
                        .WithMany()
                        .HasForeignKey("MitigationStatusId");

                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.PropertyValue", "PropertyValue")
                        .WithMany()
                        .HasForeignKey("PropertyValueId");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUser", b =>
                {
                    b.HasOne("Rivington.IG.Domain.Models.OrderManagement.Image", "ProfilePhoto")
                        .WithMany()
                        .HasForeignKey("ProfilePhotoId");
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserClaim", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserLogin", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserRole", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.ApplicationUserToken", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rivington.IG.Infrastructure.Security.Token", b =>
                {
                    b.HasOne("Rivington.IG.Infrastructure.Security.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
